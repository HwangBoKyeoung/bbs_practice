<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="movieMapper">
	
	<!-- MovieVO와 MovieCodeVO join=> collection사용 -->
	<resultMap type="movieVO" id="movieResultMap">
		<result property="movieNo" column="movie_no" />
		<result property="movieName" column="movie_name" />
		<result property="movieConent" column="movie_conent" />
		<result property="movieHit" column="movie_hit" />
		<result property="movieDirector" column="movie_director" />
		<result property="movieActor" column="movie_actor" />
		<result property="moviePrice" column="movie_price" />
		<result property="userId" column="user_id" />
		<collection property="movieCodeVO" resultMap="movieCdResultMap" />
	</resultMap>
	
	<resultMap type="movieCodeVO" id="movieCdResultMap">
		<result property="movieCdNo" column="movie_cd_no" />
		<result property="movieNo" column="movie_no" />
		<result property="movieCdDetail" column="movie_cd_detail" />
		<result property="movieCdRename" column="movie_cd_rename" />
	</resultMap>
	
	<!-- 프로시저 호출용 -->
	<resultMap id="procedureCall" type="hashmap" />
	
	<!-- 영화전체조회(페이징 처리 없음) -->
	<select id="selectListMovie" resultType="movieVO">
		SELECT MOVIE_NO
			 , MOVIE_NAME
			 , MOVIE_CONENT
			 , MOVIE_HIT
			 , MOVIE_DIRECTOR
			 , MOVIE_ACTOR
			 , MOVIE_PRICE
			 , USER_ID
		  FROM MOVIES
		 ORDER BY MOVIE_NO DESC
	</select>
	
	<!-- 영화 1건에 대한 파일 여러건 조회 -->
	<select id="selectMovie" resultMap="movieResultMap" parameterType="movieVO">
		   SELECT C.MOVIE_CD_DETAIL
			 	, C.MOVIE_CD_RENAME
		  FROM MOVIES M, MOVIE_CODE C
		 WHERE M.MOVIE_NO = C.MOVIE_NO
		   AND M.MOVIE_NO=#{movieNo}
	</select>
	
	<!-- 영화 1건 조회 -->
	<select id="selectMovieOne" resultType="movieVO" parameterType="movieVO">
		SELECT MOVIE_NO
			 , MOVIE_NAME
			 , MOVIE_CONENT
			 , MOVIE_HIT
			 , MOVIE_DIRECTOR
			 , MOVIE_ACTOR
			 , MOVIE_PRICE
			 , USER_ID
		  FROM MOVIES
		 WHERE MOVIE_NO=#{movieNo}
	</select>
	
	<!-- 영화등록, sequence 사용 -->
	<insert id="insertMovie" parameterType="movieVO">
		INSERT INTO MOVIES (MOVIE_NO
						  , MOVIE_NAME
						  , MOVIE_CONENT
						  , MOVIE_HIT
						  , MOVIE_DIRECTOR
						  , MOVIE_ACTOR
						  , MOVIE_PRICE
						  , USER_ID)
		VALUES (MOVIES_SEQ.NEXTVAL
			  , #{movieName}
			  , #{movieConent}
			  , 0
			  , #{movieDirector}
			  , #{movieActor}
			  , #{moviePrice}
			  , #{userId})
	</insert>
	
	<!-- 영화 관련 파일 등록 -->
	<insert id="insertMovieCode" parameterType="movieCodeVO">
		INSERT INTO MOVIE_CODE(MOVIE_CD_NO
							 , MOVIE_NO
							 , MOVIE_CD_DETAIL
							 , MOVIE_CD_RENAME)
		VALUES (MOVIE_CODE_SEQ.NEXTVAL
			  , MOVIES_SEQ.CURRVAL
			  , #{movieCdDetail}
			  , #{movieCdRename})
	</insert>
	
	<!-- 영화 1건 수정 -->
	<update id="updateMovie" parameterType="movieVO">
		UPDATE MOVIES
		<set>
			<if test="movieContent != null or movieContent != ''">
				MOVIE_CONENT = #{movieConent},
			</if>		
		</set>
		 WHERE MOVIE_NO = #{movieNo}
	</update>
	
	<!-- 영화 1건 삭제 -->
	<delete id="deleteMovie" parameterType="movieVO">
		DELETE FROM MOVIES
		 WHERE MOVIE_NO = #{movieNo}
	</delete>
	
	<!-- 영화 파일 삭제 (by movieNo) -->
	<delete id="deleteMovieCode" parameterType="movieVO">
		DELETE FROM MOVIE_CODE
		 WHERE MOVIE_NO = #{movieNo}
	</delete>
	
	<!-- 영화 게시판 조회수 증가 쿼리 -->
	<select id="updateMovieHit" parameterType="movieVO">
		UPDATE MOVIES
		   SET MOVIE_HIT = NVL(MOVIE_HIT,0) + 1
		 WHERE MOVIE_NO = #{movieNo}
	</select>
	
	<!-- 영화전체조회 (페이징처리 완료, 검색유지 완료) -->
	<select id="getList" resultType="movieVO">
		<![CDATA[
		SELECT MOVIE_NO
			 , MOVIE_NAME
			 , MOVIE_CONENT
			 , MOVIE_HIT
			 , MOVIE_DIRECTOR
			 , MOVIE_ACTOR
			 , MOVIE_PRICE
			 , USER_ID
		FROM (
			  SELECT ROWNUM RN
			  	   , A.MOVIE_NO
			  	   , A.MOVIE_NAME
			  	   , A.MOVIE_CONENT
			  	   , A.MOVIE_HIT
			  	   , A.MOVIE_DIRECTOR
			  	   , A.MOVIE_ACTOR
			  	   , A.MOVIE_PRICE
			  	   , A.USER_ID
			  FROM (
			  		SELECT MOVIE_NO
						 , MOVIE_NAME
						 , MOVIE_CONENT
						 , MOVIE_HIT
						 , MOVIE_DIRECTOR
						 , MOVIE_ACTOR
						 , MOVIE_PRICE
						 , USER_ID
					FROM MOVIES
					WHERE
					]]>
						<if test="searchType == 'all'">
							(MOVIE_NAME LIKE '%'||#{searchName}||'%' 
							 OR MOVIE_CONENT LIKE '%'||#{searchName}||'%')
						</if>
						<if test="searchType == 'name'">
							MOVIE_NAME LIKE '%'||#{searchName}||'%'
						</if>
						<if test="searchType == 'content'">
							MOVIE_CONENT LIKE '%'||#{searchName}||'%'
						</if>
						<if test="searchType == '' or searchType == null">
							1=1
						</if>
		<![CDATA[
					ORDER BY MOVIE_NO DESC
				)A
			)
		WHERE RN > (#{pageNum}-1) * #{amount} AND RN <= #{pageNum} * #{amount}
    	]]>
	</select>
	
	<!-- 영화 페이지 수 계산 -->
	<select id="getTotal" resultType="int">
		SELECT COUNT(*)
		  FROM MOVIES
		 WHERE 
				<if test="searchType == 'all'">
					(MOVIE_NAME LIKE '%'||#{searchName}||'%' 
					 OR MOVIE_CONENT LIKE '%'||#{searchName}||'%')
				</if>
				<if test="searchType == 'name'">
					MOVIE_NAME LIKE '%'||#{searchName}||'%'
				</if>
				<if test="searchType == 'content'">
					MOVIE_CONENT LIKE '%'||#{searchName}||'%'
				</if>
				<if test="searchType == '' or searchType == null">
					1=1
				</if>
	</select>
	
	<!-- 프로시저는 사용하지 말기.  -->
	<insert id="procedureCall" statementType="CALLABLE">
		{CALL FORWIZ_PCD(#{v_name,        mode=IN,    jdbcType=VARCHAR,    javaType=STRING},
						 #{v_conent,      mode=IN,    jdbcType=VARCHAR,    javaType=STRING},
						 #{v_director,    mode=IN,    jdbcType=VARCHAR,    javaType=STRING},
						 #{v_actor,       mode=IN,    jdbcType=VARCHAR,    javaType=STRING},
						 #{v_price,       mode=IN,    jdbcType=INTEGER,    javaType=INT},
						 #{v_cd,          mode=IN,    jdbcType=VARCHAR,    javaType=STRING},
						 #{v_cd_detail,   mode=IN,    jdbcType=VARCHAR,    javaType=STRING},
						 #{v_cd_rename,   mode=IN,    jdbcType=VARCHAR,    javaType=STRING})}
	</insert>
	
	<!-- 영화번호 출력, 이 쿼리는 사용하지 않음 -->
	<select id="selectMovieCdNo" resultType="int">
		SELECT NVL(MAX(MOVIE_NO), 0) "MOVIE_NO"
		  FROM MOVIES
	</select>
	
	<!-- 영화댓글기능 -->
	<!-- 영화 댓글 조회(영화번호에 의해 전체조회) -->
	<select id="selectListReply" parameterType="movieVO" resultType="movieReplyVO">
		SELECT MOVIE_REPLY_NO
			 , MOVIE_REPLY_CONENT
			 , MOVIE_REPLY_WRITER
			 , MOVIE_NO
			 , MOVIE_REPLY_STAR
		  FROM MOVIE_REPLY
		 WHERE MOVIE_NO = #{movieNo}
	</select>
	
	<!-- 영화 댓글 1건 삭제 -->
	<delete id="deleteReply" parameterType="movieReplyVO">
		DELETE FROM MOVIE_REPLY
		 WHERE MOVIE_REPLY_NO = #{movieReplyNo}
	</delete>
	
	<!-- 영화 댓글 1건 등록 -->
	<insert id="insertReply" parameterType="movieReplyVO">
		INSERT INTO MOVIE_REPLY(MOVIE_REPLY_NO
							  , MOVIE_REPLY_CONENT
							  , MOVIE_REPLY_WRITER
							  , MOVIE_NO
							  , MOVIE_REPLY_STAR)
		VALUES (MV_RE_SEQ.NEXTVAL
			  , #{movieReplyConent}
			  , #{movieReplyWriter}
			  , #{movieNo}
			  , #{movieReplyStar})
	</insert>
	
	<!-- 영화 평균점수 계산 쿼리 -->
	<select id="avgReplyStar" parameterType="movieReplyVO" resultType="float">
		SELECT NVL(AVG(MOVIE_REPLY_STAR),0) "REPLY_AVG"
		  FROM MOVIE_REPLY
		 WHERE MOVIE_NO = #{movieNo}
	</select>
	
</mapper>